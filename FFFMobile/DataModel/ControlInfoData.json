{"Groups":[
    {
        //Home bar is main button one.. under main you can view:
        //Profile
        //Pro Teams
        //Your Events
        "UniqueId": "HomeBar",
        "Title": "Home Page",
        "Subtitle": "We may not need this page",
        "ImagePath": "FFFMobile/Assets/HomeLogo.png",
        "Description": "Use app bars to present navigation, commands, and tools to users.",
        "Items": [
            {
                "UniqueId": "ProfileBar",
                "Title": "Profile",
                "Subtitle": "User Profile",
                "ImagePath": "ms-appx:///Assets/AppBar.png",
                "Description": "View and update user information here",
                "Content": "<p>This page is awesome... <b>AppBar</b> You're  </b>Welccome</b> people <i>AppBarPage.xaml</i> Yeah. </p><p>This app also uses a shared <b>AppBar</b> in NavigationRootPage for navigation. To see an example of more complex app bar content, look at the files in the <i>Navigation</i> folder in Visual Studio.</p>"
            },
            {
                "UniqueId": "TeamBar",
                "Title": "Professional Team",
                "Subtitle": "Team Page",
                "ImagePath": "ms-appx:///Assets/CommandBar.png",
                "Description": "Look at the current professional NFL teams ",
                "Content": "<p>Self Explanatory <b>CommandBar</b> Blarg.</p><p>Blaaarrg <b>CommandBar</b> Zip.</p><p>This <b>Blop</b> Man I need a life.... </p>"
            },
            {
                "UniqueId": "EventBar",
                "Title": "Your Events",
                "Subtitle": "View/ Update your events",
                "ImagePath": "ms-appx:///Assets/AppBarButton.png",
                "Description": "App bar buttons differ from standard buttons in several ways:\n- Their default appearance is a circle instead of a rectangle.\n- You use the Label and Icon properties to set the content instead of the Content property. The Content property is ignored.\n- The button's IsCompact property controls its size.",
                "Content": "<p>You can open the app bar and toggle the IsCompact button to see how the app bar buttons on this page change.</p><p>Use the <b>Label</b> and <b>Icon</b> properties to define the content of the app bar buttons. Set the <b>Label</b> property to a string to specify the text label. The label is shown by default but is hidden when the button is in its compact state, so you also need to specify a meaningful icon. To do that, set the button's <b>Icon</b> property to an element derived from the <b>IconElement</b> class. Four kinds of icon elements are provided:</p><p><b>FontIcon</b> - The icon is based on a glyph from the specified font family.</p><p><b>BitmapIcon</b> - The icon is based on a bitmap image file with the specified Uri.</p><p><b>PathIcon</b> - The icon is based on Path data.</p><p><b>SymbolIcon</b> - The icon is based on a predefined list of glyphs from the Segoe UI Symbol font.</p><p>Look at the <i>AppBarButtonPage.xaml</i> file in Visual Studio to see the full code for this page.</p>"
            }
        ]
    },
    {
        //bars bar
        //leaving a sub button just incase
        "UniqueId": "BarsBar",
        "Title": "Bars",
        "Subtitle": "Local Bars",
        "ImagePath": "ms-appx:///Assets/Button.png",
        "Description": "Find local bar that support different teams",
        "Items": [
            {
                "UniqueId": "Button",
                "Title": "Button",
                "Subtitle": "A control that responds to user input and raises a Click event.",
                "ImagePath": "ms-appx:///Assets/Button.png",
                "Description": "The Button control provides a Click event to respond to user input from a touch, mouse, keyboard, stylus, or other input device. You can put different kinds of content in a button, such as text or an image, or you can restyle a button to give it a new look.",
                "Content": "<p>The main purpose of a <b>Button</b> is to make something happen when a user clicks it. There are two ways you can make something happen:</p><ul><li>Handle the <b>Click</b> event.</li><li>Bind the <b>Command</b> property to an ICommand implementation that describes the command logic.</li></ul><p>Buttons often have only simple string content, but you can use any object as content. You can also change the style and template to give them any look you want.</p><p>Look at the <i>ButtonPage.xaml</i> file in Visual Studio to see the custom button style and template definitions used on this page.</p>"
            }
        ]
    },
    {
        //Find events (user is not already attending or hosting
        "UniqueId": "EventBar",
        "Title": "Events",
        "Subtitle": "View / Sign Up for Events",
        "ImagePath": "ms-appx:///Assets/GridView.png",
        "Description": "Use collection controls to display, navigate, and interact with collections of data and media.",
        "Items": [
            {
                "UniqueId": "PublicEvents",
                "Title": "Public Event Search",
                "Subtitle": "Search for Public Events happening in your area.",
                "ImagePath": "ms-appx:///Assets/FlipView.png",
                "Description": "The FlipView lets you flip through a collection of items, one at a time. It's great for displaying images from a gallery, pages of a magazine, or similar items.",
                "Content": "<p><b>FlipView</b> is an <b>ItemsControl</b>, so it can contain a collection of items of any type. To populate the view, add items to the <b>Items</b> collection, or set the <b>ItemsSource</b> property to a data source.</p><p>Look at the <i>FlipViewPage.xaml</i> file in Visual Studio to see the full code for this page.</p>"
            },
            {
                "UniqueId": "HostEvent",
                "Title": "Host an Event",
                "Subtitle": "Host a publilc or private watch party.",
                "ImagePath": "ms-appx:///Assets/GridView.png",
                "Description": "The GridView lets you show a collection of items arranged in rows and columns that scroll horizontally.",
                "Content": "<p><b>GridView</b> is an <b>ItemsControl</b>, so it can contain a collection of items of any type. To populate the view, add items to the <b>Items</b> collection, or set the <b>ItemsSource</b> property to a data source.</p><p>Set an <b>ItemTemplate</b> to define the look of individual items.</p><p>Look at the <i>GridViewPage.xaml</i> file in Visual Studio to see the full code for this page.</p>"
            }
        ]
    },
    {
        //Something
        "UniqueId": "Something",
        "Title": "Something",
        "Subtitle": "Something else",
        "ImagePath": "ms-appx:///Assets/ToolTip.png",
        "Description": "Use flyout surfaces to show or collect contextual information.",
        "Items": [
            {
                "UniqueId": "Flyout",
                "Title": "Flyout",
                "Subtitle": "Shows contextual information and enables user interaction.",
                "ImagePath": "ms-appx:///Assets/Flyout.png",
                "Description": "A Flyout displays lightweight UI that is either information, or requires user interaction. Unlike a dialog, a Flyout can be light dismissed by clicking or tapping off of it. Use it to collect input from the user, show more details about an item, or ask the user to confirm an action.",
                "Content": "<p>Look at the <i>FlyoutPage.xaml</i> file in Visual Studio to see the full code for this page.</p>"
            }
        ]
    },
  {
    "UniqueId": "SomethingElse",
    "Title": "Something More",
    "Subtitle": "Border, Canvas, Grid, ScrollViewer, StackPanel, VariableSizedWrapGrid, ViewBox",
    "ImagePath": "ms-appx:///Assets/Canvas.png",
    "Description" : "Use layout controls to arrange the controls and content in your app.",
    "Items":
    [
      {
        "UniqueId": "Border",
        "Title": "Border",
        "Subtitle": "A container control that draws a boundary line, background, or both, around another object.",
        "ImagePath": "ms-appx:///Assets/Border.png",
        "Description" : "Use a Border control to draw a boundary line, background, or both, around another object. A Border can contain only one child object.",
        "Content" : "<p>A <b>Border</b> can contain only one child object. If you want to put a border around multiple objects, first wrap them in a container object such as <b>StackPanel</b> and make the <b>StackPanel</b> the child of the <b>Border</b>.</p><p>You can change the appearance of a <b>Border</b> by setting basic properties:</p><ul><li>Width/Height</li><li>BorderBrush</li><li>BorderThickness</li><li>Background</li></ul><p></p><p>Most of the control pages in this app have XAML blocks to show basic usage. The appearance of the XAML blocks is defined by a Border control. Look at the <i>CodeBorderStyle</i> resource in App.xaml to see the <b>Style</b> that's applied to the Borders.</p><p>Look at the <i>BorderPage.xaml</i> file in Visual Studio to see the full code for this page.</p>"
		}
    ]
  }
]
}